[write]

#######################
# Compression Options #
#######################

# CompressionMethod is the method used to compress particles. Right now only
# "LagrangianDelta" is supported.
CompressionMethod = LagrangianDelta

# Vars specfies the variables that should be added to the files, using the same
# naming scheme that your input files used.
Vars = x, v, id

# Types specifies the types of these variables. u32/u64 mean 32- and 64-bit
# unsigned ints, f32/f64 mean 32- and 64-bit floats/doubles, and v32/v64 mean
# 3-vectors of 32- and 64-bit floats/doubles
Types = v32, v32, u32

# Accuracies tells guppy how accurately these variables should be stored. All
# of these are done in guppy's code units: comoving Mpc/h for positions and
# comoving km/s for velocities. (Other variables aren't supported yet.) For
# integers, you must always set the accuracy to 0.
#
# I /strongly suggest/ skimming the code paper, Mansfield & Abel (2021),
# before choosing your accuracy levels, as we ran many tests on the impact of
# different accuracy levels on halo properties and on the comrpession ratios
# that different accuracies can achieve.
Accuracies = 0.001, 1, 0

###########################
# Input/Output parameters #
###########################

# Input gives the location of the input files. You can specify some variable
# that gets used in the file names by putting it in braces:
# {print-format,variable-description}. The string before the comma is a
# formatting instruction like C's printf of Python's % operator use. The string
# after the variable is either the name of the variable (e.g. "snapshot") or
# an inclusive range of numbers (e.g. 0..511). The example string below
# would describe files that looked like /path/to/input/snapdir_015/snap_015.31,
# with the first two numbers being the snapshot and the last one being the
# index of the file in the snapshot.
Input = /path/to/input/snapdir_{%03d,snaphot}/snap_{%03d,snapshot}.{%d,0..511}

# Output gives the location of the output files and is formatted identically
# to Input. You should add an "output" variable somewhere to the file name
# that contains the index of the output file within the snapshot. It's usually
# a good idea to use the same naming scheme as your normal files, except with
# '.gup' appended to the end of the files. The example string below would
# describe files that looked like /path/to/output/snapdir_015/snap_015.31.gup.
Output = /path/to/output/snapdir_{%03d,snaphot}/snap_{%03d,snapshot}.{%d,output}.gup

# Snaps lists the snapshots that you want to run guppy on. This is a
# comma-separated list of either numbers or (inclusive) particle ranges written
# as start..end. If you have corrupted snapshots, you can remove them via
# "subtraction". The example below would run Guppy on snapshots 0 to 100,
# except for the corrupted snapshot 63, and then also on snapshot 200.
Snaps = 0..100 - 63, 200

# OutputGridWdith is the width of the output grid of files in each dimension.
# particles will be evenly distributed among OutputGridWidth^3 files.
OutputGridWidth = 4

# CreateMissingDirectories tells guppy to create any directories it needs that
# don't already exist when generating output files. By default it will assume
# you had a typo in the Output variable and crash.
# CreateMissingDirectories = false

#####################
# File Type Options #
#####################

# FileType tells guppy what type the input files have. Currently the only
# supported types are Gadget-2 and LGadget-2.
FileType = LGadget-2

# IDOrder tells guppy how to map IDs onto Lagrangian space. Currently, the
# only supported ordering is ZUnigridPlusOne, the overwhelmingly most common
# ordering. In this ordering, the first particle has ID 1, the particle above
# it the z-direction in the ICs is 2, and so on.
# IDOrder = ZUnigridPlusOne

# GadgetVars gives the names of the different data blocks in your Gadget file.
# You don't need this variable if you aren't using Gadget. If you haven't done
# anything to your gadget configuration files, the example  gives the correct
# names/ordering. You're free to change these names to whatever you want, but
# (1) make sure to make the same changes to the Vars varaible, (2) don't use
# any braces in your variable names, since guppy's internal naming conventions
# use braces to separate user-create named from guppy-created annotations, and
# (3) the 'id' and 'x' variable names are handled specially.
# GadgetVars = x, v, id

# GadgetTypes gives the types of each Gadget block, using the same naming
# conventions as the Vars variable. If you haven't done anything to your Gadget
# configuration, the example gives the right types. The most common change from
# the default is using 64-bit IDs instead of 32-bit IDs. If you have >2 billion
# particles, you're definitely using 64-bit IDs.
# GadgetTypes = v32, v32, u32

